pipex/  
│── src/                 # Código fuente del programa
│   ├── main.c           # Función principal del programa
│   ├── pipex.c          # Lógica principal de la ejecución de comandos
│   ├── errors.c         # Manejo de errores
│   ├── utils.c          # Funciones auxiliares
│   ├── process.c        # Funciones relacionadas con fork, execve y pipes
│   ├── files.c          # Funciones para manejar archivos (open, close, etc.)
│── includes/            # Archivos de cabecera
│   ├── pipex.h          # Archivo de cabecera principal
│── libft/               # Librería auxiliar (si se permite)
│── bonus/               # Código para la parte bonus
│   ├── pipex_bonus.c    # Lógica principal para la parte bonus
│   ├── utils_bonus.c    # Funciones auxiliares para la parte bonus
│   ├── process_bonus.c  # Funciones de procesos para la parte bonus
│── tests/               # Archivos de prueba (no se entregan)
│   ├── test.sh          # Script para probar el programa
│── Makefile             # Compilación del proyecto


         +---------------------------+
         |        Proceso Padre       |
         |  (main -> ft_pipex())      |
         +---------------------------+
                   |
       +--------------------+
       | Crea un Pipe       |  -->  [pipe(int_array)]
       | int_array[0] (lectura)
       | int_array[1] (escritura)
       +--------------------+
                   |
        --------------------------
       |                          |
       v                          v
+-----------------+       +-----------------+
|   Proceso Hijo 1|       |   Proceso Hijo 2|
|  (ejecuta cmd1) |       |  (ejecuta cmd2) |
+-----------------+       +-----------------+
       |                          |
       |                          |
       v                          v
  +------------------+       +------------------+
  | dup2(fd[0], 0)  |       | dup2(int_array[0], 0) |
  | (stdin = infile)|       | (stdin = pipe)       |
  | dup2(int_array[1], 1) | | dup2(fd[1], 1)       |
  | (stdout = pipe) |       | (stdout = outfile)   |
  +------------------+       +------------------+
       |                          |
       |                          |
       v                          v
+-----------------+       +-----------------+
| execve(cmd1)    |       | execve(cmd2)    |
| (ejecuta argv[2])|       | (ejecuta argv[3])|
+-----------------+       +-----------------+

1️⃣ El proceso padre crea un pipe (pipe(int_array)).
2️⃣ Se crean dos procesos hijos con fork():

Hijo 1 ejecuta cmd1, leyendo de infile y escribiendo en el pipe.
Hijo 2 ejecuta cmd2, leyendo del pipe y escribiendo en outfile.
3️⃣ Redirección con dup2():
Hijo 1: Redirige stdin a infile, y stdout al pipe.
Hijo 2: Redirige stdin al pipe, y stdout a outfile.
4️⃣ Cada hijo ejecuta su comando con execve().
5️⃣ El padre cierra el pipe y espera a los hijos (waitpid()).